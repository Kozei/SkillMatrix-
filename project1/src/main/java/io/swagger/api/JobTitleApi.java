/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.JobTitle;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-12-01T09:17:33.513Z[GMT]")
@Validated
public interface JobTitleApi {

    @Operation(summary = "add a job-title to the database", description = "", tags={ "job-title" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JobTitle.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/job-title",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<JobTitle> addJobTitle(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody JobTitle body);


    @Operation(summary = "delete a job-title by id", description = "", tags={ "job-title" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "deleted"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/job-title/{job-titleId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteJobTitle(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("job-titleId") Long jobTitleId);


    @Operation(summary = "find job-title by id", description = "", tags={ "job-title" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = JobTitle.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/job-title/{job-titleId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JobTitle> getJobTitleById(@Parameter(in = ParameterIn.PATH, description = "id of job-title to return", required=true, schema=@Schema()) @PathVariable("job-titleId") Long jobTitleId);


    @Operation(summary = "fetch all job-titles from the database", description = "", tags={ "job-title" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = JobTitle.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/job-title",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<JobTitle>> getJobTitles();


    @Operation(summary = "update a job-title", description = "", tags={ "job-title" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/job-title/{job-titleId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateJobTitle(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("job-titleId") Long jobTitleId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody JobTitle body);

}

