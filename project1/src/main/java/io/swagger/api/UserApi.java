/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.LanguageInput;
import io.swagger.model.SkillInput;
import io.swagger.model.User;
import io.swagger.model.UserLanguageInputArray;
import io.swagger.model.UserPersonalInfo;
import io.swagger.model.UserSkillInputArray;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-12-01T09:17:33.513Z[GMT]")
@Validated
public interface UserApi {

    @Operation(summary = "add a user to the database", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> addUser(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody User body);


    @Operation(summary = "add one or multiple languages to the user", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserLanguageInputArray.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/language",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<LanguageInput>> addUserLanguage(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<LanguageInput> body);


    @Operation(summary = "add personal information to a single user", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserPersonalInfo.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/personalInfo",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UserPersonalInfo> addUserPersonalInfo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UserPersonalInfo body);


    @Operation(summary = "add one or multiple skills to the user", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/skill",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> addUserSkill(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody  List<SkillInput> body);


    @Operation(summary = "delete a user by id", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "deleted"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId);


    @Operation(summary = "delete a user language by id", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "deleted"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/language/{languageId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserLanguage(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("languageId") Integer languageId);


    @Operation(summary = "delete a user's personal info by id", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "deleted"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/personalInfo/{personalInfoId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserPersonalInfo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("personalInfoId") Integer personalInfoId);


    @Operation(summary = "delete a user skill by id", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "deleted"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/skill/{skillId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserSkill(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("skillId") Integer skillId);


    @Operation(summary = "find users by department", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/findByDepartment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersByDepartment(@NotNull @Parameter(in = ParameterIn.QUERY, description = "department values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "application", "sales", "marketing" }
)) @Valid @RequestParam(value = "department", required = true) List<String> department);


    @Operation(summary = "find users by job-title", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/findByJobTitle",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersByJobTitle(@NotNull @Parameter(in = ParameterIn.QUERY, description = "job-title values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "developer", "manager", "administrator" }
)) @Valid @RequestParam(value = "job-title", required = true) List<String> jobTitle);


    @Operation(summary = "find users by language and language level", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/findByLanguageAndLanguageLevel",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersByLanguageAndLanguageLevel(@NotNull @Parameter(in = ParameterIn.QUERY, description = "language values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "english", "german", "greek" }
)) @Valid @RequestParam(value = "language", required = true) List<String> language, @NotNull @Parameter(in = ParameterIn.QUERY, description = "language-level values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "a1", "a2", "b1", "b2", "c1", "c2" }
)) @Valid @RequestParam(value = "language-level", required = true) List<String> languageLevel);


    @Operation(summary = "find users by location", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/findByLocation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersByLocation(@NotNull @Parameter(in = ParameterIn.QUERY, description = "location values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "leipzig", "frankfurt", "athens" }
)) @Valid @RequestParam(value = "location", required = true) List<String> location);


    @Operation(summary = "find users by skill", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/findBySkill",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersBySkill(@NotNull @Parameter(in = ParameterIn.QUERY, description = "skill values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "java", "javascript", "python" }
)) @Valid @RequestParam(value = "skill", required = true) List<String> skill);


    @Operation(summary = "find users by skill and skill level", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/findBySkillAndSkillLevel",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersBySkillAndSkillLevel(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Skill values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "java", "javascript", "python" }
)) @Valid @RequestParam(value = "skill", required = true) List<String> skill, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Skill level values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "beginner", "intermediate", "expert" }
)) @Valid @RequestParam(value = "skill-level", required = true) List<String> skillLevel);


    @Operation(summary = "find users by skill category", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/findByCategory",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> findUsersBySkillCategory(@NotNull @Parameter(in = ParameterIn.QUERY, description = "location values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "framework", "cloud", "programming" }
)) @Valid @RequestParam(value = "skill-category", required = true) List<String> skillCategory);


    @Operation(summary = "find user by id", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserById(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId);


    @Operation(summary = "fetch languages of a single user from the database", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserLanguageInputArray.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/language",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserLanguageInputArray> getUserLanguages(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId);


    @Operation(summary = "fetch personal information of a user from the database", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserPersonalInfo.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/personalInfo",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserPersonalInfo> getUserPersonalInfo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId);


    @Operation(summary = "fetch skills of a single user from the database", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserSkillInputArray.class))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/skill",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<UserSkillInputArray> getUserSkills(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId);


    @Operation(summary = "fetch all users from the database", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers();


    @Operation(summary = "update a user by id", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody User body);


    @Operation(summary = "update one or multiple languages of a user", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/language",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserLanguage(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody LanguageInput body);


    @Operation(summary = "update user's personal information", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/personalInfo",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserPersonalInfo(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody UserPersonalInfo body);


    @Operation(summary = "update one or multiple skills of a user", description = "", tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "created"),
        
        @ApiResponse(responseCode = "4XX", description = "problem caused by the user"),
        
        @ApiResponse(responseCode = "5XX", description = "problem caused by the server") })
    @RequestMapping(value = "/user/{userId}/skill",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity <User> updateUserSkill(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("userId") Integer userId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody List<SkillInput> body);

}

